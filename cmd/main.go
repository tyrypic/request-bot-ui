package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/joho/godotenv"

	"ExBot/internal/adapter/db"
	"ExBot/internal/usecase"

	"github.com/golang-migrate/migrate/v4"
	_ "github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file"
)

// loadEnv –∑–∞–≥—Ä—É–∂–∞–µ—Ç .env (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—à–∏–±–∫–∏
func loadEnv() {
	// –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å .env –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ENV")
	} else {
		log.Println("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env")
	}
}

func runMigrations(dsn string) {
	fmt.Println(dsn)
	// –ø—É—Ç—å "file://../migrations" –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	m, err := migrate.New("file://../migrations", dsn)
	if err != nil {
		log.Fatalf("–º–∏–≥—Ä–∞—Ü–∏–∏: –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä: %v", err)
	}
	if err := m.Up(); err != nil && err != migrate.ErrNoChange {
		log.Fatalf("–º–∏–≥—Ä–∞—Ü–∏–∏: UP —É–ø–∞–ª–∏: %v", err)
	}
	log.Println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
}

func main() {
	// 0. –ó–∞–≥—Ä—É–∂–∞–µ–º .env –¥–æ –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
	loadEnv()

	// 1. –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	dsn := os.Getenv("DATABASE_URL")
	if dsn == "" {
		log.Fatal("‚úã –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω–∞")
	}
	log.Printf("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î: %s", dsn)

	// 2. –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// 3. –°–æ–∑–¥–∞—ë–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	pool, err := pgxpool.New(ctx, dsn)
	if err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: %v", err)
	}
	log.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	defer func() {
		pool.Close()
		log.Println("üëã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
	}()

	// 5. –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
	runMigrations(dsn)

	// 4. –°–µ–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
	adminID := os.Getenv("ADMIN_IDS")
	if adminID == "" {
		log.Fatalf("‚ùå –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω ADMIN_ID")
		return
	}
	log.Printf("üëë ID –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %v", adminID)

	userRepo := db.NewUserRepo(pool)
	userSvc := usecase.NewUserService(userRepo)
	if err := userSvc.SeedAdmin(ctx, adminID); err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %v", err)
	}
	log.Println("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

	bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_APITOKEN"))
	if err != nil {
		panic(err)
	}

	bot.Debug = true

	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 30

	updates := bot.GetUpdatesChan(updateConfig)
	for update := range updates {
		if update.Message == nil {
			continue
		}

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, update.Message.Text)
		msg.ReplyToMessageID = update.Message.MessageID

		if _, err := bot.Send(msg); err != nil {
			panic(err)
		}
	}
	// === –î–∞–ª—å–Ω–µ–π—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===

	// 6. –ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	// me := &domain.User{
	// 	TelegramID: 12345678,
	// 	Username:   "my_bot_user",
	// 	FirstName:  "–ò–≤–∞–Ω",
	// 	LastName:   "–ò–≤–∞–Ω–æ–≤",
	// }
	// if err := userSvc.Register(ctx, me); err != nil {
	// 	log.Fatalf("‚ùå Register error: %v", err)
	// }
	// log.Printf("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: %+v", me)

	// // 7. –ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
	// me.RealName = "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
	// me.Email = "ivan@example.com"
	// me.Age = 28
	// me.City = "–ú–æ—Å–∫–≤–∞"
	// if err := userSvc.UpdateProfile(ctx, me); err != nil {
	// 	log.Fatalf("‚ùå UpdateProfile error: %v", err)
	// }
	// log.Printf("‚úèÔ∏è –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω: %+v", me)

	// // 8. –†–∞–±–æ—Ç–∞ —Å –∑–∞—è–≤–∫–∞–º–∏
	// reqRepo := db.NewRequestRepo(pool)
	// reqSvc := usecase.NewRequestService(reqRepo)

	// // 8.1 –ü–æ–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É (UPSERT)
	// req, err := reqSvc.Submit(ctx, me.ID)
	// if err != nil {
	// 	log.Fatalf("‚ùå SubmitRequest error: %v", err)
	// }
	// log.Printf("üì® –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞: %+v", req)

	// // 8.2 –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	// list, err := reqSvc.List(ctx, me.ID)
	// if err != nil {
	// 	log.Fatalf("‚ùå ListRequests error: %v", err)
	// }
	// log.Printf("üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %d", me.ID, len(list))

	// // 8.3 –û–¥–æ–±—Ä–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É (–ø—Ä–∏–º–µ—Ä)
	// if len(list) > 0 {
	// 	first := list[0]
	// 	if err := reqSvc.Approve(ctx, first.ID); err != nil {
	// 		log.Fatalf("‚ùå ApproveRequest error: %v", err)
	// 	}
	// 	log.Printf("‚úÖ –ó–∞—è–≤–∫–∞ %d –æ–¥–æ–±—Ä–µ–Ω–∞", first.ID)
	// }

	// log.Println("üéâ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
}
